#define EPSILON (0.01)
#define PLAN_TAN (M_PI/1000.0)
#define ISO_STEP (0.01)
#define ISO_THRESHOLD (0.00000001)
#define NB_REF 9
#define MAX_REF_SS 1
#define PHOTON_EQ_DST 1.0
#define PHOTON_EQ_ANG (M_PI/10.0)
#define PHOTON_BOX_FCT 8.0
#define PHOTON_RAD 5.0
#define PHOTON_REF 7
#define NB_PHOTON_IT 50000
#define NB_PHOTON_LIGHT (50*50)
#define PHOTON_EXP 2.0
#define RADIANCE_PHOTON_EXP 0.5

#ifdef SCENE
#include "SubShape.h"
#include "CustomIsoSurface.h"
#include "Sphere.h"
#include "Plan.h"
#include "BasicTexture.h"
#include "CustomPerlinPattern.h"
#include "ChequeredPattern.h"
#include "MarblePattern.h"
#include "CloudPattern.h"
#include "TextureBumpMap.h"
#include "SphericLight.h"

#include <math.h>

#define LIGHTCOL (Color::White)
#define BRUN Color("EECFA1")
#define KHAKI Color("9F9F5F")

double size=180;

double f_r(const Point& p)
{
    return sqrt(SQ(p.getX())+SQ(p.getY())+SQ(p.getZ()));
}

double f_sphere(const Point& p,double r)
{
    return f_r(p)-r;
}

const double Nihil=1e-10;
const double NegOne=Nihil-1.;
const double PosOne=1-Nihil;

const double Rmajor=3.0;
const double Rminor=0.1;
const double NrOfBands=4;
const double GapSize=0.5;
const double K=1.8;

const double TwoPi=2.0*M_PI;
const double FourPi=4.0*M_PI;
const double DivAngle=TwoPi/NrOfBands;
const double GapAngle=DivAngle*GapSize;
const double HalfGapAngle=GapAngle/2.0;

double AdjFn(double x)
{
    return x+(x<0?FourPi:TwoPi);
}

double LogFn(double x)
{
    return log(2.0/(1.0-x)-1.0)/K;
}

double ClampFn(double n,double mn,double mx)
{
    return MAX(mn,MIN(n,mx));
}

double yFn(const Point& p)
{
    return LogFn(ClampFn(-p.getY()/(Nihil+f_r(p)),NegOne,PosOne));
}

double TempFn(const Point& p,double Theta,double ModAngle,double RR)
{
    return ModAngle-GapAngle<0?
           (ModAngle-HalfGapAngle<0?
            (f_sphere(Point(p.getX()-RR*f_r(p*Vector(1,0,1))*cos(Theta-ModAngle),
                            p.getY()-RR*p.getY(),
                            p.getZ()-RR*f_r(p*Vector(1,0,1))*sin(Theta-ModAngle)),Rminor)):
            (f_sphere(Point(p.getX()-RR*f_r(p*Vector(1,0,1))*cos(Theta-ModAngle+GapAngle),
                            p.getY()-RR*p.getY(),
                            p.getZ()-RR*f_r(p*Vector(1,0,1))*sin(Theta-ModAngle+GapAngle)),Rminor))):
           (fabs(f_sphere(p,Rmajor))-Rminor);
}

double SphereSpiralsFunction(const Point& p)
{
    return TempFn(p,atan2(p.getZ(),p.getX()),
                  fmod(AdjFn(atan2(p.getZ(),p.getX())-yFn(p)),DivAngle),
                  Rmajor/(Nihil+f_r(p)));
}

void buildScene(Scene& world)
{
    Point ct(0,0,3000);
    Rotation rot(-1.2,0,0.4);

    Shape* s=new CustomIsoSurface(SphereSpiralsFunction,size,
                                  new SubShape(new Sphere(Rmajor+Rminor+EPSILON*2.0),
                                          new Sphere(Rmajor-Rminor-EPSILON*2.0)),
                                  Mark(ct,rot));
    //Shape *s=new Sphere((Rmajor+Rminor)*size,Mark(ct,rot));
    s->setTexture(new CloudPattern(new BasicTexture(BRUN*0.9),
                                   new BasicTexture(Color::White),
                                   new BasicTexture(BRUN*0.9),80),Volumic);
    s->setBumpMap(new TextureBumpMap(new MarblePattern(new BasicTexture(Color::White),
                                     new BasicTexture(Color::Black),50),1.3),Volumic);
    s->setDiffCoeff(0.45);
    s->setSpecCoeff(0.3);
    s->setGlareCoeff(1000);
    world.addShape(s);

    Shape* sp=new Sphere(Rmajor*size*(0.85),Mark(ct));
    //sp->setTexture(new BasicTexture(Color::White*0.95));
    sp->setTexture(new BasicTexture(KHAKI));
    sp->setDiffCoeff(0.05);
    sp->setSpecCoeff(0.5);
    sp->setGlareCoeff(100);
    sp->setReflectCoeff(0.2);
    sp->setRefractCoeff(0.8);
    sp->setDensity(1.1);
    world.addShape(sp);

    Shape* p=new Plan(3000+(Rmajor+Rminor)*size*1.3,Point(0,0,0),
                      Mark(Point(0.5,-0.2,1),Rotation::random()));
    /*p->setTexture(new CloudPattern(new BasicTexture(KHAKI*0.4),
    			 new BasicTexture(KHAKI*0.5),
    			 new BasicTexture(KHAKI*0.4),80),
    			 Planar);*/
    p->setTexture(new CloudPattern(new BasicTexture(Color::White*0.5),
                                   new BasicTexture(Color::White*0.6),
                                   new BasicTexture(Color::White*0.5),80),
                  Planar);
    p->setBumpMap(new TextureBumpMap(new CustomPerlinPattern(new BasicTexture(Color::White),
                                     new BasicTexture(Color::Black),6,3,5,50.0),2.0),
                  Planar);
    p->setDiffCoeff(0.8);
    p->setSpecCoeff(0.1);
    p->setGlareCoeff(1000);
    p->setReflectCoeff(0.1);
    world.addShape(p);

    SphericLight *light=new SphericLight(500,Point(0,0,3000)+Vector(0.25,-0.6,0.3).norm()*-3500.0,LIGHTCOL*1.6);
    light->setMitigation(3500-(Rmajor+Rminor)*size);
    world.addLight(light);
    world.setAmbiant(LIGHTCOL*0.4);

    world.setPhotonBoxIn(new Sphere(Rmajor*size,Mark(ct)));
    world.setPhotonBoxOut(new Sphere(Rmajor*size*5.0,Mark(ct)));
}

void setCamera(Camera& cam)
{
    Point sc=Point(-100,-400,3000);
    Point cp=Point(-5000,3200,-1200);
    Vector cv=cp.getVectorTo(sc).norm()*100;

    Vector v1=Vector(1,1,0).projOrthoTo(cv).norm();
    Vector v2=cv.prodVect(v1).norm();

    //cam=Camera(cp,cv,Enumeration<Vector>(512,v1*0.028*2.0),Enumeration<Vector>(384,v2*0.028*2.0));
    //cam=Camera(cp,cv,Enumeration<Vector>(1024,v1*0.028),Enumeration<Vector>(768,v2*0.028));
    //cam=Camera(cp,cv,Enumeration<Vector>(1280,v1*0.0224),Enumeration<Vector>(1024,v2*0.0224));
    cam=Camera(cp,cv,Enumeration<Vector>(1600,v1*0.01792),Enumeration<Vector>(1200,v2*0.01792));
    //cam=Camera(cp,cv,Enumeration<Vector>(2048,v1*0.014),Enumeration<Vector>(1536,v2*0.014));

    cam.setFocus(cp.dist(sc),250);
}

void setRendererQuality(RendererQuality& rendererQuality)
{
    //rendererQuality.setAliasing(3);
    //rendererQuality.setShadow(25);
    //rendererQuality.setFocus(10);
}
#endif
