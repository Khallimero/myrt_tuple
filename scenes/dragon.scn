#define EPSILON (0.001)
#define PLAN_TAN (M_PI/1000.)
#define MAX_REC (250)
#define ISO_STEP (.01)
#define ISO_THRESHOLD (0.00000001)
#define NB_REF 5
#define MAX_REF_SS 1
#define PHOTON_EQ_DST 0.001
#define PHOTON_EQ_ANG (M_PI/100.)
#define PHOTON_BOX_FCT 2.
#define PHOTON_RAD 5.
#define PHOTON_REF 1
#define NB_PHOTON_IT 0
#define NB_PHOTON_LIGHT 0
#define PHOTON_EXP 1.
#define CAUSTIC_PHOTON_EXP 1.
#define RADIANCE_PHOTON_EXP .1

#ifdef SCENE
#include "PLYShape.h"
#include "BasicTexture.h"
#include "Plan.h"
#include "PointLight.h"
#include "SphericLight.h"
#include "CustomPerlinPattern.h"
#include "Cylinder.h"
#include "SubShape.h"
#include "Point.h"
#include "Vector.h"

#define ORANGE Color("DFAF7B")
#define JADE Color("B6D4B4")

void buildScene(Scene& world)
{
    Shape* dragon=new PLYShape("../ply/dragon.ply",
                               100,Mark(Point(0,0,1000),Rotation(0,0,0)));
    //dragon->setTexture(new BasicTexture(JADE));
    dragon->setTexture(new CustomPerlinPattern(new BasicTexture(JADE*1.3),
                       new BasicTexture(JADE),
                       4,3,2,2),Volumic);
    dragon->setDiffCoeff(.7);
    dragon->setSpecCoeff(.4);
    dragon->setGlareCoeff(100);
    dragon->setRadianceCoeff(.1);
    dragon->setReflectCoeff(.07);
    world.addShape(dragon);

    Shape* plan=new Plan(-5.272950+EPSILON,Point(0,0,0),
                         Mark(Point(0.,1.,0.)));
    plan->setTexture(new BasicTexture(ORANGE));
    plan->setDiffCoeff(1.);
    plan->setRadianceCoeff(.2);
    world.addShape(plan);

    Point lc(-500.,-2000.,-1500.);
    Point sc(0,-25,1000);
    Vector vct=sc.getVectorTo(lc);

    //world.addLight(new PointLight(lc,Color::White*.8));
    world.addLight(new SphericLight(20,lc+vct*0.5,Color::White*.8));
    world.setAmbiant(Color::White*.2);

    Shape *cyl=new Cylinder(20,Mark(sc,Rotation(vct.norm())));
    Shape *lp=new Plan(vct.norm()*-1,Mark(sc+vct*0.2));
    CSGShape *ls=new SubShape(cyl,lp,true);
    ls->setHitShape(CSGShape::second,false);
    world.addShape(ls);
}

void setCamera(Camera& cam)
{
    Point c(-10,-150,200);
    Point s(0,-12,1000);
    Vector z=c.getVectorTo(s).norm()*100;
    Vector x=Vector(1,0,0).projOrthoTo(z).norm();
    Vector y=Vector(0,1,0).projOrthoTo(z).norm();
    //cam=Camera(c,z,Enumeration<Vector>(512,x*.006),Enumeration<Vector>(384,y*.006));
    //cam=Camera(c,z,Enumeration<Vector>(1024,x*.003),Enumeration<Vector>(768,y*.003));
    cam=Camera(c,z,Enumeration<Vector>(1280,x*.0024),Enumeration<Vector>(1024,y*.0024));
}

void setRendererQuality(RendererQuality& rendererQuality)
{
    //rendererQuality.setAliasing(3);
    //rendererQuality.setShadow(25);
}
#endif
