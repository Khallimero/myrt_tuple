#define EPSILON (0.001)
#define PLAN_TAN (M_PI/1000.)
#define MAX_REC (250)
#define ISO_STEP (.01)
#define ISO_THRESHOLD (0.00000001)
#define NB_REF 5
#define MAX_REF_SS 2
#define PHOTON_EQ_DST 0.001
#define PHOTON_EQ_ANG (M_PI/100.)
#define PHOTON_BOX_FCT 2.
#define PHOTON_RAD 5.
#define PHOTON_REF 1
#define NB_PHOTON_IT 0
#define NB_PHOTON_LIGHT 0
#define PHOTON_EXP 1.
#define CAUSTIC_PHOTON_EXP 1.
#define RADIANCE_PHOTON_EXP .1

#ifdef SCENE
#include "PLYShape.h"
#include "BasicTexture.h"
#include "Plan.h"
#include "PointLight.h"
#include "SphericLight.h"
#include "CustomPerlinPattern.h"
#include "Sphere.h"
#include "Point.h"
#include "Vector.h"

#define ORANGE Color("C29B61")
#define VERT Color("B0F2B6")

void buildScene(Scene& world)
{
    Shape* dragon=new PLYShape("../ply/xyzrgb_dragon_ascii.ply",true,0.1,
                               Mark(Point(0,0,1000),Rotation(0,M_PI*.75,0)));
    dragon->setTexture(new CustomPerlinPattern(new BasicTexture(ORANGE),
                       new BasicTexture(ORANGE*.95),
                       //4,3,2,2),Volumic);
                       4,3,2),Volumic);
    dragon->setDiffCoeff(1);
    dragon->setSpecCoeff(.3);
    dragon->setGlareCoeff(100);
    world.addShape(dragon);

    Shape* plan=new Plan(4.128651+EPSILON,Point(0,0,0),
                         Mark(Point(0.,1.,0.)));
    plan->setTexture(new BasicTexture(Color::Black));
    plan->setDiffCoeff(.9);
    plan->setReflectCoeff(.2);
    world.addShape(plan);

    //world.addLight(new PointLight(Point(-500.,-2000.,-1500.),Color::White*.8));
    SphericLight *light=new SphericLight(200,Point(-1000.,-2000.,-1000.),Color::White*.8);
    light->setMitigation(light->dist(Point(0,0,1000)));
    world.addLight(light);
    world.setAmbiant(Color::White*.2);
}

void setCamera(Camera& cam)
{
    Point c(-10,-250,200);
    //Point s(0,.8,1000);
    Point s(0,0,1000);
    Vector z=c.getVectorTo(s).norm()*100;
    Vector x=Vector(1,0,0).projOrthoTo(z).norm();
    Vector y=Vector(0,1,0).projOrthoTo(z).norm();
    cam=Camera(c,z,Enumeration<Vector>(1280,x*.0024),Enumeration<Vector>(720,y*.0024));
    //cam=Camera(c,z,Enumeration<Vector>(1920,x*.0016),Enumeration<Vector>(1080,y*.0016));
    //cam=Camera(c,z,Enumeration<Vector>(2560,x*.0012),Enumeration<Vector>(1440,y*.0012));
    //cam=Camera(c,z,Enumeration<Vector>(3840,x*.0008),Enumeration<Vector>(2160,y*.0008));
}

void setRendererQuality(RendererQuality& rendererQuality)
{
    //rendererQuality.setAliasing(2);
    //rendererQuality.setShadow(25);
}
#endif
