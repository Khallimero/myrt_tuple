#include "DecoCube.h"
#include "Knot.h"
#include "TorusKnot.h"
#include "StraightShapeBuilder.h"
#include "Tore.h"
#include "Sphere.h"
#include "Plan.h"
#include "BasicTexture.h"
#include "CustomPerlinPattern.h"
#include "ChequeredPattern.h"
#include "MarblePattern.h"
#include "PerlinBumpMap.h"
#include "TextureBumpMap.h"
#include "InfiniteLight.h"
#include "BulbLight.h"
#include "SubShape.h"

/*
#define EPSILON (0.01)
#define PLAN_TAN (M_PI/1000.)
#define MAX_REC (250)
#define ISO_STEP (10.)
#define ISO_TH (0.00000001)
#define NB_REF 5
#define MAX_REF_SS 1
#define PHOTON_EQ_DST 0.01
#define PHOTON_EQ_ANG (M_PI/10.)
#define PHOTON_BOX_FCT 8.
#define PHOTON_RAD 5.
#define CAUSTIC_PHOTON_REF 5
#define CAUSTIC_PHOTON_NB (10*1000*1000)
#define CAUSTIC_PHOTON_EXP 2.
#define RADIANCE_PHOTON_REF 0
#define RADIANCE_PHOTON_NB (0)
#define RADIANCE_PHOTON_EXP 0
*/

//#define RSEED 0L

#define EMERALD Color(115./255.,158./255.,115./255.)
#define RUBY Color(224./255.,17./255.,95./255.)
#define ORANGE (Color(255,162,0)*(1./255.)*.9)
#define GOLD (Color(255,215,0)*(1./255.))
#define ARGENT (Color(192,192,192)*(1./255.))
#define COBALT Color(61,89,171)*(1./255.)

double size=300;

void buildScene(Scene& world){
  Point ct=Point(-300,0,3000);
  
  ParametricPrimitive* pp=new TorusKnot(1,5,2.0);
  //ParametricPrimitive* pp=new Knot(1,-2,1,2,2,3);
  StraightShapeBuilder sb(300,1,180,150);
  Shape* tk=sb.getBoxedInstance(Mark(ct,Rotation(-M_PI/2.0,0,0)),
				pp,Cylindrical);
  //tk->setTexture(new BasicTexture(/*ARGENT*1.2*/Color("37B57B")));
  /*tk->setDiffCoeff(.8);
  tk->setSpecCoeff(.5);
  tk->setGlareCoeff(100);
  tk->setReflectCoeff(.1);*/
  tk->setTexture(new BasicTexture(Color(Color::COBALT*1.5).norm()));
  //tk->setBumpMap(new PerlinBumpMap(.2),Volumic,Vector::unit*(1./20.));
  tk->setDiffCoeff(.05);
  tk->setSpecCoeff(.4);
  tk->setGlareCoeff(1000);
  tk->setReflectCoeff(.1);
  tk->setRefractCoeff(.9);
  tk->setDensity(1.3);
  tk->setBeer(50,Color(Color::COBALT*1.5).norm());



  Shape* tr1=new Tore(600,300,Mark(ct,Rotation(-M_PI/2.0,0,0)));
  /*tr1->setBumpMap(new TextureBumpMap(new MarblePattern(new BasicTexture(Color::White),
						       new BasicTexture(Color::Black),50),2.),
						       Volumic);*/
  tr1->setTexture(new BasicTexture(ARGENT*1.2));
  tr1->setDiffCoeff(.8);
  tr1->setSpecCoeff(.5);
  tr1->setGlareCoeff(100);
  tr1->setReflectCoeff(.25);

  Shape* tr2=new Tore(600,200,Mark(ct,Rotation(-M_PI/2.0,0,0)));
  tr2->setTexture(new BasicTexture(ARGENT*1.2));
  tr2->setDiffCoeff(.8);
  tr2->setSpecCoeff(.5);
  tr2->setGlareCoeff(100);
  tr2->setReflectCoeff(.25);

  CSGShape* ss1=new SubShape(tr1,tr2);
  CSGShape* ss2=new SubShape(ss1,tk);
  //ss->setHitShape2(false);
  world.addShape(ss2);

  StraightShapeBuilder sb2(300,1,36,100);
  Shape* tk2=sb2.getBoxedInstance(Mark(ct,Rotation(-M_PI/2.0,0,0)),
				  pp,Cylindrical);
  /*tk2->setTexture(new CustomPerlinPattern(new BasicTexture(Color::White),
					  new BasicTexture(EMERALD),
					  2,1,4,50),
					  Volumic);*/
  tk2->setTexture(new BasicTexture(Color(Color::COBALT*1.5).norm()));
  tk2->setBumpMap(new PerlinBumpMap(.2),Volumic,Vector::unit*(1./20.));
  tk2->setDiffCoeff(.05);
  tk2->setSpecCoeff(.4);
  tk2->setGlareCoeff(1000);
  tk2->setReflectCoeff(.1);
  tk2->setRefractCoeff(.9);
  tk2->setDensity(1.3);
  tk2->setBeer(50,Color(Color::COBALT*1.5).norm());
  //world.addShape(tk2);

  /*Shape* tr2=new Tore(600,200,Mark(ct,Rotation(-M_PI/2.0,0,0)));
  tr2->setTexture(new BasicTexture(ORANGE));
  tr2->setDiffCoeff(.8);
  tr2->setSpecCoeff(.5);
  tr2->setGlareCoeff(1000);
  tr2->setReflectCoeff(.1);*/
  //world.addShape(tr2);

  /*Shape* decocube=new DecoCube(2.3,3,size,
			       Mark(Point(-300,0,3000),Rotation(RND*2.*M_PI,RND*2.*M_PI,RND*2.*M_PI)));
  decocube->setTexture(new MarblePattern(new BasicTexture(Color::White*.9),
					 new BasicTexture(RUBY*.8),50),
		       Volumic);
  decocube->setBumpMap(new TextureBumpMap(new MarblePattern(new BasicTexture(Color::White),
							    new BasicTexture(Color::Black),50),2.),
		       Volumic);
  decocube->setDiffCoeff(.95);
  world.addShape(decocube);*/

  /*Shape* sphere=new Sphere(size*2.45,Mark(Point(-300,0,3000)));
  sphere->setTexture(new BasicTexture(EMERALD));
  sphere->setBumpMap(new PerlinBumpMap(.1),Volumic,Vector::unit*(1./18.));
  sphere->setDiffCoeff(.1);
  sphere->setSpecCoeff(.5);
  sphere->setGlareCoeff(1000);
  sphere->setReflectCoeff(.05);
  sphere->setRefractCoeff(.95);
  sphere->setDensity(1.3);
  world.addShape(sphere);*/

  Shape* plan=new Plan(5000,Point(0,0,0),
		       Mark(Point(0.2,0.5,1.0),Rotation(RND*2.0*M_PI,RND*2.0*M_PI,RND*2.0*M_PI)));
  plan->setTexture(new ChequeredPattern(new CustomPerlinPattern(new BasicTexture(Color::White),
								new BasicTexture(Color::Black),2,4,3,600),
					new BasicTexture(Color::White),Vector::unit*(1./500.)),
		   Planar);
  plan->setDiffCoeff(.9);
  plan->setSpecCoeff(.2);
  plan->setGlareCoeff(1000);
  world.addShape(plan);
  
  world.addLight(new BulbLight(600,Point(-300,0,3000)+Vector(1.,.35,1.).norm()*-15000.,Color::White*.8));
  world.setAmbiant(Color::White*.2);

  world.setCausticBoxIn(new Sphere(size*2.5,Mark(Point(-300,0,3000))));
  world.setCausticBoxOut(new Sphere(size*15,Mark(Point(-300,0,3000))));
}  

void setCamera(Camera& cam){
  cam=Camera(Point(0,0,0),Vector(0,0,100),
	     //Enumeration<Vector>(64,Vector(1,0,0)),Enumeration<Vector>(64,Vector(0,1,0)));
	     //Enumeration<Vector>(512,Vector(.2,0,0)),Enumeration<Vector>(384,Vector(0,.2,0)));
	     Enumeration<Vector>(1024,Vector(.1,0,0)),Enumeration<Vector>(768,Vector(0,.1,0)));
	     //Enumeration<Vector>(1280,Vector(.08,0,0)),Enumeration<Vector>(1024,Vector(0,.08,0)));
  //Enumeration<Vector>(2048,Vector(.05,0,0)),Enumeration<Vector>(1536,Vector(0,.05,0)));

  //cam=Camera(Point(500,300,0),Vector(0,0,100),
  //Enumeration<Vector>(1024,Vector(.04,0,0)),Enumeration<Vector>(768,Vector(0,.04,0)));
  //Enumeration<Vector>(2048,Vector(.02,0,0)),Enumeration<Vector>(1536,Vector(0,.02,0)));

  cam.setFocus(2250,250);
}

void setRendererParam(RendererParam& rendererParam){
  //rendererParam.setAliasing(3);
  //rendererParam.setShadow(25);
  //rendererParam.setFocus(10);
}
