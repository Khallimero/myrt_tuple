#define EPSILON (0.001)
#define PLAN_TAN (M_PI/1000.0)
#define ISO_STEP (0.01)
#define ISO_THRESHOLD (0.00000001)
#define NB_REF 5
#define MAX_REF_SS 1
#define PHOTON_EQ_DST 0.001
#define PHOTON_EQ_ANG (M_PI/100.0)
#define PHOTON_BOX_FCT 2.0
#define PHOTON_RAD 5.0
#define PHOTON_REF 1
#define NB_PHOTON_IT 0
#define NB_PHOTON_LIGHT 0
#define PHOTON_EXP 1.0
#define RADIANCE_PHOTON_EXP 0

#ifdef SCENE
#include "PLYShape.h"
#include "CustomIsoSurface.h"
#include "Sphere.h"
#include "Texture.h"
#include "BasicTexture.h"
#include "Plan.h"
#include "PointLight.h"
#include "SphericLight.h"
#include "Cylinder.h"
#include "SubShape.h"
#include "CustomPerlinPattern.h"
#include "Point.h"
#include "Vector.h"

#define MARBRE (Color::White)

double cube(const Point& p)
{
    return -1.0
           +pow(p.getX(),20)
           +pow(p.getY(),20)
           +pow(p.getZ(),20);
}

void buildScene(Scene& world)
{
    SmartPointer<const Texture> tex=new CustomPerlinPattern(
        new BasicTexture(MARBRE),
        new BasicTexture(MARBRE*0.9),
        4,3,2,2);

    PLYShape* s=new PLYShape("../ply/marianne.ply",true,0.05,
                             Mark(Point(-3,3,1000),Rotation(M_PI/36.0,0,-M_PI/13.0)));
    s->setTexture(tex,Volumic);
    s->setDiffCoeff(0.75);
    s->setSpecCoeff(0.4);
    s->setGlareCoeff(100);
    world.addShape(s);

    Shape *c=new CustomIsoSurface(cube,3.5,
                                  new Sphere(3.5*sqrt(3)+EPSILON),
                                  Mark(Point(-1.7,11.5,1035.5),Rotation(0,-M_PI/16.0,M_PI/90.0)));
    c->setTexture(tex,Volumic);
    c->setDiffCoeff(0.75);
    c->setSpecCoeff(0.4);
    c->setGlareCoeff(100);
    world.addShape(c);

    Shape* plan=new Plan(6.9+3.0,Point(0,0,0),
                         Mark(Point(0,1,0)));
    plan->setTexture(new BasicTexture(Color("37B57B")));
    plan->setDiffCoeff(0.8);
    plan->setSpecCoeff(0.2);
    plan->setGlareCoeff(1000);
    world.addShape(plan);

    Point lc(-500,-1000,-500);
    Point sc(-20,-30,1000);
    Vector vct=sc.getVectorTo(lc);

    SphericLight* light=new SphericLight(10,sc+vct*0.5,Color::White*0.8);
    light->setMitigation(light->dist(sc));
    world.addLight(light);
    world.setAmbiant(Color::White*0.2);

    Shape *cyl=new Cylinder(12,Mark(sc,Rotation(vct.norm())));
    Shape *lp=new Plan(vct.norm()*-1,Mark(sc+vct*0.2));
    CSGShape *ls=new SubShape(cyl,lp,true);
    ls->setHitShape(CSGShape::second,false);
    world.addShape(ls);
}

void setCamera(Camera& cam)
{
    Point c(-2,-300,0);
    Point s(0,-12,1000);
    Vector z=c.getVectorTo(s).norm()*100;
    Vector x=Vector(1,0,0).projOrthoTo(z).norm();
    Vector y=Vector(0,1,0).projOrthoTo(z).norm();
    //cam=Camera(c,z,Enumeration<Vector>(1024,x*0.0032),Enumeration<Vector>(768,y*0.0032));
    cam=Camera(c,z,Enumeration<Vector>(1280,x*0.0024),Enumeration<Vector>(1024,y*0.0024));
    //cam=Camera(c,z,Enumeration<Vector>(2048,x*0.0016),Enumeration<Vector>(1536,y*0.0016));
}

void setRendererQuality(RendererQuality& rendererQuality)
{
    //rendererQuality.setAliasing(3);
    //rendererQuality.setShadow(50);
}
#endif
