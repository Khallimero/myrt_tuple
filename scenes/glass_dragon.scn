#define EPSILON (0.00001)
#define PLAN_TAN (M_PI/1000.0)
#define ISO_STEP (0.01)
#define ISO_THRESHOLD (0.00000001)
#define NB_REF 3
#define MAX_REF_SS 3
#define PHOTON_EQ_DST 0.005
#define PHOTON_EQ_ANG (M_PI/100.0)
#define PHOTON_BOX_FCT 0.1
#define PHOTON_RAD 0.01
#define PHOTON_REF 5
#define NB_PHOTON_IT (36*1000*1000)
#define NB_PHOTON_LIGHT 100
#define PHOTON_EXP 1.75
#define RADIANCE_PHOTON_EXP 0

#ifdef SCENE
#include "PLYShape.h"
#include "BasicTexture.h"
#include "Plan.h"
#include "PointLight.h"
#include "SphericLight.h"
#include "PerlinBumpMap.h"
#include "Cylinder.h"
#include "SubShape.h"
#include "Point.h"
#include "Vector.h"

#define ORANGE Color("DFAF7B")
#define GREEN Color("012B09")

void buildScene(Scene& world)
{
    Shape* dragon=new PLYShape("../ply/dragon.ply",true,100,
                               Mark(Point(0,0,1000),Rotation(0,-M_PI/10.0,0)));
    dragon->setTexture(new BasicTexture(Color::White));
    //dragon->setBumpMap(new PerlinBumpMap(0.15),Volumic,Vector::Unit*20.0);
    dragon->setDiffCoeff(0.35);
    dragon->setSpecCoeff(0.5);
    dragon->setGlareCoeff(100);
    dragon->setReflectCoeff(0.07);
    dragon->setRefractCoeff(0.9);
    dragon->setTranslucencyCoeff(0.35);
    dragon->setDensity(1.546);
    dragon->setBeer(2.0,0.5,GREEN,false);
    world.addShape(dragon);

    Shape* plan=new Plan(-5.272950+EPSILON,Point(0,0,0),
                         Mark(Point(0,1,0)));
    plan->setTexture(new BasicTexture(ORANGE));
    plan->setDiffCoeff(1.0);
    world.addShape(plan);

    Point lc(-500,-2000,2000);
    Point sc(0,-25,1000);
    Vector vct=sc.getVectorTo(lc);

    //world.addLight(new PointLight(lc,Color::White*0.8));
    SphericLight *light=new SphericLight(20,lc+vct*0.25,Color::White);
    light->setMitigation(light->dist(sc));
    world.addLight(light);
    world.setAmbiant(Color::White*0.1);

    Shape *cyl=new Cylinder(20,Mark(sc,Rotation(vct.norm())));
    Shape *lp=new Plan(vct.norm()*-1,Mark(sc+vct*0.2));
    CSGShape *ls=new SubShape(cyl,lp,true);
    ls->setHitShape(CSGShape::second,false);
    world.addShape(ls);

    //world.setPhotonBoxIn(new Sphere(15,Mark(Point(0,-5,1000))));
    //world.setPhotonBoxOut(new Sphere(30.,Mark(Point(0,-5,1000))));
}

void setCamera(Camera& cam)
{
    Point c(-10,-150,200);
    Point s(0,-12,1000);
    Vector z=c.getVectorTo(s).norm()*100;
    Vector x=Vector(1,0,0).projOrthoTo(z).norm();
    Vector y=Vector(0,1,0).projOrthoTo(z).norm();
    //cam=Camera(c,z,Enumeration<Vector>(512,x*0.006),Enumeration<Vector>(384,y*0.006));
    //cam=Camera(c,z,Enumeration<Vector>(1024,x*0.003),Enumeration<Vector>(768,y*0.003));
    //cam=Camera(c,z,Enumeration<Vector>(1280,x*0.0024),Enumeration<Vector>(1024,y*0.0024));
    cam=Camera(c,z,Enumeration<Vector>(2048,x*0.0015),Enumeration<Vector>(1536,y*0.0015));
}

void setRendererQuality(RendererQuality& rendererQuality)
{
    //rendererQuality.setAliasing(3);
    //rendererQuality.setShadow(25);
}
#endif
