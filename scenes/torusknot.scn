#define EPSILON (0.01)
#define PLAN_TAN (M_PI/1000.)
#define MAX_REC (250)
#define ISO_STEP (10.)
#define ISO_THRESHOLD (0.00000001)
#define NB_REF 5
#define MAX_REF_SS 1
#define PHOTON_EQ_DST 1.
#define PHOTON_EQ_ANG (M_PI/10.)
#define PHOTON_BOX_FCT 8.
#define PHOTON_RAD 5.
#define PHOTON_REF 5
#define NB_PHOTON_IT 500000
#define NB_PHOTON_LIGHT 9
#define PHOTON_EXP 4.
#define CAUSTIC_PHOTON_EXP 1.
#define RADIANCE_PHOTON_EXP .1

#ifdef SCENE
#include "Tore.h"
#include "BasicTexture.h"
#include "PerlinBumpMap.h"
#include "TorusKnot.h"
#include "StraightShapeBuilder.h"
#include "CoilingShapeBuilder.h"
#include "ChequeredPattern.h"
#include "CustomPerlinPattern.h"
#include "Plan.h"
#include "SphericLight.h"

#define RUBY Color("E0115F")
#define VERT Color("679E67")

void buildScene(Scene& world)
{
    Point ct=Point(-300,-100,3000);

    Shape* t=new Tore(600,180,Mark(ct,Rotation(-M_PI/2.,0,0)));
    t->setTexture(new BasicTexture(RUBY),Undefined);
    t->setBumpMap(new PerlinBumpMap(.2),Volumic,Vector::Unit/20.);
    t->setDiffCoeff(.05);
    t->setSpecCoeff(.5);
    t->setGlareCoeff(1000);
    t->setReflectCoeff(.15);
    t->setRefractCoeff(.8);
    t->setDensity(1.58);
    t->setBeer(200,2,RUBY);
    world.addShape(t);

    ParametricPrimitive<1>* pp=new TorusKnot(3,7,2.0);
    StraightShapeBuilder sb(300,1,360,60);
    //CoilingShapeBuilder sb(.2,32*7,300,1,36000,20);
    Shape* tk=sb.getBoxedInstance(Mark(ct,Rotation(-M_PI/2.0,0,0)),
                                  pp,Spherical);
    tk->setTexture(new CustomPerlinPattern(new BasicTexture(Color::White),
                                           new BasicTexture(VERT),
                                           2,1,4,50),
                   Volumic);
    tk->setDiffCoeff(.8);
    tk->setSpecCoeff(.5);
    tk->setGlareCoeff(1000);
    tk->setReflectCoeff(.1);
    world.addShape(tk);

    Shape* plan=new Plan(5000,Point(0,0,0),
                         Mark(Point(0.2,0.5,1.0),Rotation::random()));
    plan->setTexture(new ChequeredPattern(new CustomPerlinPattern(new BasicTexture(Color::White),
                                          new BasicTexture(Color::Black),2,4,3,600),
                                          new BasicTexture(Color::White),Vector::Unit/500.),
                     Planar);
    plan->setDiffCoeff(.9);
    world.addShape(plan);

    world.addLight(new SphericLight(500,ct+Vector(.7,.45,1)*-10000,Color::White*.8));
    world.setAmbiant(Color::White*.2);

    world.setPhotonBoxIn(new Sphere(800,Mark(ct)));
    world.setPhotonBoxOut(new Sphere(10000,Mark(ct)));
}

void setCamera(Camera& cam)
{
    cam=Camera(Point::null,Vector(0,0,100),
               //Enumeration<Vector>(512,Vector(.2,0,0)),Enumeration<Vector>(384,Vector(0,.2,0)));
               //Enumeration<Vector>(1024,Vector(.1,0,0)),Enumeration<Vector>(768,Vector(0,.1,0)));
               Enumeration<Vector>(1280,Vector(.08,0,0)),Enumeration<Vector>(1024,Vector(0,.08,0)));
    //Enumeration<Vector>(2048,Vector(.05,0,0)),Enumeration<Vector>(1536,Vector(0,.05,0)));
}

void setRendererQuality(RendererQuality& rendererQuality)
{
    //rendererQuality.setAliasing(3);
    //rendererQuality.setShadow(25);
}
#endif
