#define EPSILON (0.001)
#define PLAN_TAN (M_PI/1000.)
#define MAX_REC (250)
#define ISO_STEP (.0001)
#define ISO_THRESHOLD (0.00000001)
#define NB_REF 5
#define MAX_REF_SS 1
#define PHOTON_EQ_DST .5
#define PHOTON_EQ_ANG (M_PI/10.)
#define PHOTON_BOX_FCT 10.
#define PHOTON_RAD 15.
#define PHOTON_REF 5
#define NB_PHOTON_IT (0)
#define NB_PHOTON_LIGHT (0)
#define PHOTON_EXP 1.
#define CAUSTIC_PHOTON_EXP 1.
#define RADIANCE_PHOTON_EXP 0.

#ifdef SCENE
#include "BasicTexture.h"
#include "CustomTexture.h"
#include "CloudPattern.h"
#include "TextureBumpMap.h"
#include "CustomPerlinPattern.h"
#include "Mandelbulb.h"
#include "Juliabulb.h"
#include "Plan.h"
#include "SphericLight.h"

#define BROWN Color("C29B61")
#define VERT Color("37B57B")
#define ORANGE Color("FFCC99")

#define RSEED 1400795837

Color ctex(const Point& p)
{
    double d=(Point(p/800).dist(Point(0,0,0))-0.5)/0.7;
    return ORANGE*(1.0-d)+VERT*d;
}

void buildScene(Scene& world)
{
    Point ct=Point(-300,-100,3000);

    //Shape* ft=new Mandelbulb(8,4.0,4,800,Mark(ct,Rotation::random()));
    Shape* ft=new Juliabulb(Point(-0.5,-0.5,-0.5),8,4.0,4,800,Mark(ct,Rotation::random()));
    ft->setTexture(new CustomTexture(ctex));
    ft->setDiffCoeff(.8);
    ft->setSpecCoeff(.6);
    ft->setGlareCoeff(100);
    //ft->setReflectCoeff(.15);
    world.addShape(ft);

    Shape* plan=new Plan(5000,Point(0,0,0),
                         Mark(Point(0.2,0.5,1.0),Rotation::random()));
    plan->setTexture(new CloudPattern(new BasicTexture(Color::White*.85),
                                      new BasicTexture(Color::White*.9),
                                      new BasicTexture(Color::White*.85),150),
                     Planar);
    plan->setBumpMap(new TextureBumpMap(new CustomPerlinPattern(new BasicTexture(Color::White),
                                        new BasicTexture(Color::Black),6,3,5,100.),2.),
                     Planar);
    plan->setDiffCoeff(.65);
    world.addShape(plan);

    world.addLight(new SphericLight(500,ct+Vector(.7,.45,1)*-10000,Color::White*.7));
    world.setAmbiant(Color::White*.3);

    //world.setFog(Fog(Color::White,50000,2.0));

    //world.setPhotonBoxIn(new Sphere(800,Mark(ct)));
    //world.setPhotonBoxOut(new Sphere(700*1.5*10,Mark(ct)));
}

void setCamera(Camera& cam)
{
    cam=Camera(Point::null,Vector(0,0,100),
               Enumeration<Vector>(512,Vector(.2,0,0)),Enumeration<Vector>(384,Vector(0,.2,0)));
    //Enumeration<Vector>(1024,Vector(.1,0,0)),Enumeration<Vector>(768,Vector(0,.1,0)));
    //Enumeration<Vector>(1280,Vector(.08,0,0)),Enumeration<Vector>(1024,Vector(0,.08,0)));
    //Enumeration<Vector>(2048,Vector(.05,0,0)),Enumeration<Vector>(1536,Vector(0,.05,0)));
    //Enumeration<Vector>(1280,Vector(.04,0,0)),Enumeration<Vector>(1024,Vector(0,.04,0)));
}

void setRendererQuality(RendererQuality& rendererQuality)
{
    //rendererQuality.setAliasing(2);
    //rendererQuality.setShadow(50);
}
#endif
