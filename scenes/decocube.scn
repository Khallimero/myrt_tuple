#define EPSILON (0.01)
#define PLAN_TAN (M_PI/1000.0)
#define MAX_REC (250)
#define ISO_STEP (0.01)
#define ISO_THRESHOLD (0.00000001)
#define NB_REF 5
#define MAX_REF_SS 1
#define PHOTON_EQ_DST 0.01
#define PHOTON_EQ_ANG (M_PI/10.0)
#define PHOTON_BOX_FCT 8.0
#define PHOTON_RAD 5.0
#define PHOTON_REF 5
#define NB_PHOTON_IT (500*500)
#define NB_PHOTON_LIGHT (15*15)
#define PHOTON_EXP 2.0
#define CAUSTIC_PHOTON_EXP 1.0
#define RADIANCE_PHOTON_EXP 0.0

#ifdef SCENE
#include "DecoCube.h"
#include "Sphere.h"
#include "Plan.h"
#include "BasicTexture.h"
#include "CustomPerlinPattern.h"
#include "ChequeredPattern.h"
#include "MarblePattern.h"
#include "PerlinBumpMap.h"
#include "TextureBumpMap.h"
#include "InfiniteLight.h"
#include "SphericLight.h"

//#define RSEED 1378512438L
//#define RSEED 0

#define EMERALD Color("739E73")
#define RUBY Color("E0115F")

double size=300;

void buildScene(Scene& world)
{
    Point ct(-300,0,3000);

    Shape* decocube=new DecoCube(2.3,3,size,
                                 Mark(ct,Rotation::random()));
    decocube->setTexture(new MarblePattern(new BasicTexture(Color::White*0.9),
                                           new BasicTexture(RUBY*0.8),50),
                         Volumic);
    decocube->setBumpMap(new TextureBumpMap(new MarblePattern(new BasicTexture(Color::White),
                                            new BasicTexture(Color::Black),50),2.0),
                         Volumic);
    decocube->setDiffCoeff(0.95);
    world.addShape(decocube);

    Shape* sphere=new Sphere(size*2.45,Mark(ct));
    sphere->setTexture(new BasicTexture(EMERALD));
    sphere->setBumpMap(new PerlinBumpMap(.1),Volumic,Vector::Unit/18.0);
    sphere->setDiffCoeff(0.1);
    sphere->setSpecCoeff(0.5);
    sphere->setGlareCoeff(300);
    sphere->setReflectCoeff(0.05);
    sphere->setRefractCoeff(0.95);
    sphere->setDensity(1.3);
    world.addShape(SmartPointer<Shape>(sphere));

    Shape* plan=new Plan(5000,Point(0,0,0),
                         Mark(Point(0.2,0.5,1.0),Rotation::random()));
    plan->setTexture(new ChequeredPattern(new CustomPerlinPattern(new BasicTexture(Color::White),
                                          new BasicTexture(Color::Black),2,4,3,600),
                                          new BasicTexture(Color::White),Vector::Unit/500.0),
                     Planar);
    plan->setDiffCoeff(0.9);
    plan->setSpecCoeff(0.2);
    plan->setGlareCoeff(100);
    world.addShape(plan);

    world.addLight(new SphericLight(600,ct+Vector(1.0,0.35,1.0).norm()*-15000.0,Color::White*0.8));
    world.setAmbiant(Color::White*0.2);

    world.setPhotonBoxIn(new Sphere(size*3.0,Mark(ct)));
    world.setPhotonBoxOut(new Sphere(size*15.0,Mark(ct)));
}

void setCamera(Camera& cam)
{
    cam=Camera(Point(0,0,0),Vector(0,0,100),
               //Enumeration<Vector>(64,Vector(1,0,0)),Enumeration<Vector>(64,Vector(0,1,0)));
               //Enumeration<Vector>(512,Vector(0.2,0,0)),Enumeration<Vector>(384,Vector(0,0.2,0)));
               //Enumeration<Vector>(1024,Vector(0.1,0,0)),Enumeration<Vector>(768,Vector(0,0.1,0)));
               Enumeration<Vector>(1280,Vector(0.08,0,0)),Enumeration<Vector>(1024,Vector(0,0.08,0)));
    //Enumeration<Vector>(2048,Vector(0.05,0,0)),Enumeration<Vector>(1536,Vector(0,0.05,0)));

    //cam=Camera(Point(500,300,0),Vector(0,0,100),
    //Enumeration<Vector>(1024,Vector(0.04,0,0)),Enumeration<Vector>(768,Vector(0,0.04,0)));
    //Enumeration<Vector>(2048,Vector(0.02,0,0)),Enumeration<Vector>(1536,Vector(0,0.02,0)));

    cam.setFocus(2250,250);
}

void setRendererQuality(RendererQuality& rendererQuality)
{
    //rendererQuality.setAliasing(3);
    //rendererQuality.setShadow(25);
    //rendererQuality.setFocus(10);
}
#endif
