#define EPSILON (0.01)
#define PLAN_TAN (M_PI/1000.0)
#define ISO_STEP (0.01)
#define ISO_THRESHOLD (0.00000001)
#define NB_REF 3
#define MAX_REF_SS 1
#define PHOTON_EQ_DST 0.5
#define PHOTON_EQ_ANG (M_PI/10.0)
#define PHOTON_BOX_FCT 10.0
#define PHOTON_RAD 15.0
#define PHOTON_REF 5
#define NB_PHOTON_IT (15000)
#define NB_PHOTON_LIGHT (15000)
#define PHOTON_EXP 1.0
#define CAUSTIC_PHOTON_EXP 1.0
#define RADIANCE_PHOTON_EXP 0.0

#ifdef SCENE
#include "SubShape.h"
#include "CustomIsoSurface.h"
#include "Sphere.h"
#include "Plan.h"
#include "Cylinder.h"
#include "BasicTexture.h"
#include "SphericLight.h"
#include "PerlinNoise.h"

//#define RSEED 0L

#define ORANGE (Color("FFA200")*0.9)
#define LIGHTCOL Color::White

double getValue(const Point& p)
{
    return -1.0
           +pow(p.getX(),20)
           +pow(p.getY(),20)
           +pow(p.getZ(),20);
}

class Bubble:public IsoSurface
{
public:
    Bubble(double size,
           const Shape* box,
           const Mark& mk=Mark::Ref)
        :IsoSurface(size,box,mk)
    {
        rnd=RND;
    }
    ~Bubble() {}

public:
    virtual double getValue(const Point& p)const
    {
        return sqrt(p)-1.0+pn.noise(p*0.8)*rnd;
    }

protected:
    PerlinNoise pn;
    double rnd;
};

const double size=300;

void buildScene(Scene& world)
{
    Point ct=Point(0,0,0);
    Vector vct(5000,1500,-3500);

    Shape *s=new CustomIsoSurface(getValue,
                                  size,
                                  new Sphere(sqrt(3)+EPSILON),
                                  Mark(ct));
    s->setTexture(new BasicTexture(Color::White),Undefined);
    s->setDiffCoeff(0.075);
    s->setSpecCoeff(0.8);
    s->setGlareCoeff(100);
    s->setReflectCoeff(0.07);
    s->setRefractCoeff(0.9);

    for(int i=0; i<80; i++)
    {
        static struct vector_unary_idx_op:public unary_idx_op<double,TREBLE_SIZE>
        {
            virtual double operator()(const tuple_idx<TREBLE_SIZE>&)const
            {
                return (RND-0.5)*2.0;
            }
        } _unary_idx_op;
        Mark m(ct+Vector(_unary_idx_op)*(size*0.9));
        double r=(i<20?10.0+RND*15.0:3.0+RND*5.0);
        Shape *s1=new Bubble(r,new Sphere(2.0),m);
        s1->setTexture(new BasicTexture(Color::White),Undefined);
        s1->setDiffCoeff(0.05);
        s1->setSpecCoeff(0.5);
        s1->setGlareCoeff(10);
        s1->setReflectCoeff(0.2);
        s1->setRefractCoeff(0.95);
        s=new SubShape(s,s1,false);
    }
    s->setDensity(1.546);
    s->setBeer(size/2.0,2,ORANGE);
    world.addShape(s);

    Shape *p=new Plan(size+1,Point::null,
                      Mark(Point(0,0,1)));
    p->setTexture(new BasicTexture(Color("E0FFFB")*.9),Undefined);
    p->setDiffCoeff(0.6);
    world.addShape(p);

    world.setAmbiant(LIGHTCOL*0.25);
    SphericLight *light=new SphericLight(800,ct+vct*0.8,LIGHTCOL*2.0);
    light->setMitigation(light->dist(ct));
    world.addLight(light);

    Shape *lc=new Cylinder(850,Mark(ct+vct*0.8,Rotation(vct)));
    Shape *lp=new Plan(Vector::UnitZ,Mark(ct+vct*0.2));
    CSGShape *ls=new SubShape(lc,lp,true);
    ls->setHitShape(CSGShape::second,false);
    world.addShape(ls);

    //world.setPhotonBoxIn(new Sphere(size*sqrt(3),Mark(ct)));
    //world.setPhotonBoxOut(new Sphere(size*20.,Mark(ct)));
}

void setCamera(Camera& cam)
{
    Point sc=Point(-500,0,0);
    Point cp=Point(-1200,5000,-1500);
    Vector cv=cp.getVectorTo(sc).norm()*100;

    Vector v1=Vector(1,0.2,0).projOrthoTo(cv).norm();
    Vector v2=cv.prodVect(v1).norm();

    //cam=Camera(cp,cv,Enumeration<Vector>(640,v1*0.056),Enumeration<Vector>(360,v2*0.056));
    //cam=Camera(cp,cv,Enumeration<Vector>(1280,v1*0.028),Enumeration<Vector>(720,v2*0.028));
    //cam=Camera(cp,cv,Enumeration<Vector>(1920,v1*(0.028/1.5)),Enumeration<Vector>(1080,v2*(0.028/1.5)));
    cam=Camera(cp,cv,Enumeration<Vector>(2560,v1*0.014),Enumeration<Vector>(1440,v2*0.014));
    //cam=Camera(cp,cv,Enumeration<Vector>(3840,v1*(0.028/3.0)),Enumeration<Vector>(2160,v2*(0.028/3.0)));
}

void setRendererQuality(RendererQuality& rendererQuality)
{
    //rendererQuality.setAliasing(2);
    //rendererQuality.setShadow(50);
}
#endif
